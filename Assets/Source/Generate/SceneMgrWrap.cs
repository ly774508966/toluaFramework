//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SceneMgr), typeof(MonoSingleton<SceneMgr>));
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("Update", Update);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegFunction("LoadSceneDoneCallback", SceneMgr_LoadSceneDoneCallback);
		L.RegFunction("LoadSceneUpdateProgressCallback", SceneMgr_LoadSceneUpdateProgressCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			SceneMgr obj = (SceneMgr)ToLua.CheckObject(L, 1, typeof(SceneMgr));
			string arg0 = ToLua.CheckString(L, 2);
			SceneMgr.LoadSceneDoneCallback arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (SceneMgr.LoadSceneDoneCallback)ToLua.CheckObject(L, 3, typeof(SceneMgr.LoadSceneDoneCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneDoneCallback), func) as SceneMgr.LoadSceneDoneCallback;
			}

			SceneMgr.LoadSceneUpdateProgressCallback arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (SceneMgr.LoadSceneUpdateProgressCallback)ToLua.CheckObject(L, 4, typeof(SceneMgr.LoadSceneUpdateProgressCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneUpdateProgressCallback), func) as SceneMgr.LoadSceneUpdateProgressCallback;
			}

			obj.LoadScene(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneMgr obj = (SceneMgr)ToLua.CheckObject(L, 1, typeof(SceneMgr));
			obj.Update();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneMgr_LoadSceneDoneCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneDoneCallback), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneDoneCallback), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneMgr_LoadSceneUpdateProgressCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneUpdateProgressCallback), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(SceneMgr.LoadSceneUpdateProgressCallback), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

